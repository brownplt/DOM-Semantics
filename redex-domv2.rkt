#lang racket
(require redex)
(provide DOM DOM-reduce)

;; Version 2
;; Annotations refer to the DOM Level 3 Events Specification, except where
;; otherwise noted.
;; (http://www.w3.org/TR/DOM-Level-3-Events/)

(define (all-unique? l)
  (equal? (remove-duplicates l) l))

(define (not-in? T_event P LS)
  (empty? (filter (lambda (tp) (equal? tp (list T_event P))) LS)))

(define-language DOM
  [bool #t #f]
  
  ; Events
  ; 4.1 - Event Interface
  [E (event T Bubbles Cancels Trusted)]
  ; T (event type):  readonly attribute DOMString type;
  ; The name of the event type. The name must be a DOMString. Specifications 
  ; that define events, content authors, and authoring tools must use 
  ; case-sensitive event type names."
  [T string]
  ; Bubbles (bubbles): readonly attribute boolean bubbles;
  ; Used to indicate whether or not an event is a bubbling event. If the event 
  ; can bubble the value must be true, otherwise the value must be false.
  [Bubbles bool]
  ; Cancels (cancelable): readonly attribute boolean cancelable;
  ; Used to indicate whether or not an event can have its default action 
  ; prevented (see also Default actions and cancelable events). If the default 
  ; action can be prevented the value must be true, otherwise the value must be
  ; false.
  [Cancels bool]
  ; Trusted (isTrusted): readonly attribute boolean isTrusted;
  ; Used to indicate whether this event was generated by the user agent 
  ; (trusted) or by script (untrusted). See trusted events for more details.
  [Trusted bool]
  
  ; Phases
  ; 3.1 - Event dispatch and DOM event flow
  ; ... the event object must complete one or more event phases.
  ; This specification defines three event phases: capture phase; target phase;
  ; and bubble phase...
  [P capture target bubble]
  
  ; Locations are like pointers.  The machine state maintains
  ; a list of (location, DOM node) pairs.
  [loc (variable-prefix loc)]
  ; parent is possibly null (parent of root node)
  [parent null loc]

  ; DOM Nodes
  ; N: node name, listeners, children, parent
  [N (node string LS (loc ...) parent)]
  ; TP: event type, phase
  [TP (T P)]
  ; LS: a list of (TP, listener list) pairs
  [LS (side-condition (((name tp TP) (L ...)) ...)
                      (all-unique? (term (tp ...))))]
  
  ; Event Listeners
  ; 4.4 - EventListener interface
  [L (listener bool S) ;was this installed with useCapture?
     (handler S)]
  ; Predispatch: target node, path root->target, event
  [PD (pre-dispatch parent (loc ...) E)]
  [PDef bool]
  [SP bool]
  [SI bool]
  ; Dispatch types:
  ; event, curr node/null, phase, prevent default?, path, pending listeners,
  ; stack dispatch executes listener steps
  [D (dispatch E parent P PDef SP SI (loc ...) (L ...) L)]
  ; dispatch-collect looks for listeners
  [DC (dispatch-collect E parent P PDef SP SI (loc ...))]
  ; dispatch-next determines whether to visit a next node, to jump
  ; to the default action, or to terminate
  [DN (dispatch-next E parent P PDef SP SI (loc ...) (L ...))]
  ; dispatch-default executes the default action, unless prevented
  [DD (dispatch-default E PDef (loc ...))]
  ; dispatch-stupid handles the degenerate case of a single-node path
  [DS (dispatch-stupid loc E)]
  ; Listener steps
  [S skip
     (return bool)
     (seq S S)
     stop-prop
     stop-immediate
     prevent-default
     mutate
     (debug-print string)
     (addEventListener loc string bool S)
     (removeEventListener loc string bool S)
     (setEventHandler loc string S)
     (if-phase P S S)
     (if-curTarget loc S S)
     PD
     D
     DC
     DN
     DD
     DS]
  
  ; Contexts
  [DispCtx hole
           (if-phase DispCtx S S)
           (if-curTarget DispCtx S S)
           (seq DispCtx S)]
  [LCtx (listener bool Ctx)  ;does there need to be a bool flag here?
        (handler Ctx)]
  [Ctx hole
       (seq Ctx S)
       (dispatch E parent P PDef SP SI (loc ...) (L ...) LCtx)]
  
  ; Machine state
  [N-store ((loc_!_ N) ...)]
  [Log (string ...)]
  [M (state S N-store Log)])

; addEventListener
; 4.3 - EventTargetInterface
; Registers an event listener, depending on the useCapture parameter, on the
; capture phase of the DOM event flow or its target and bubbling phases.
(define-metafunction DOM
  [(addListenerHelper ((TP_a (L_a ...)) ...
                       ((string_type P) (L_p ...))
                       (TP_b (L_b ...)) ...) 
                      string_type P bool_useCapture
                      S_listener)
   ((TP_a (L_a ...)) ...
    ((string_type P) (L_p ... (listener bool_useCapture S_listener)))
    (TP_b (L_b ...)) ...)] ;when (string_type P) is present
  [(addListenerHelper ((TP_a (L_a ...)) ...) 
                      string_type P bool_useCapture
                      S_listener)
   ((TP_a (L_a ...)) ...
    ((string_type P) ((listener bool_useCapture S_listener))))]) ;when (string_type P) is absent

(define-metafunction DOM
  [(listenerPresent ((TP_a (L_a ...)) ...
                     ((string_type P) (L_p ... (listener bool_useCapture S) L_q ...))
                     (TP_b (L_b ...)) ...)
                    string_type P bool_useCapture S)
   #t]
  [(listenerPresent LS string P bool_useCapture S)
   #f])

(define-metafunction DOM
  [(addListener LS string_type bool_useCapture S_listener)
   ; From spec of addEventListener, sec 4.3 para 3
   ; when the listener is already present, do nothing
   ,(let ([outerPhase
           (if (term bool_useCapture) (term capture) (term bubble))])
      (if (term (listenerPresent LS
                                 string_type
                                 ,outerPhase
                                 bool_useCapture
                                 S_listener))
        (term LS)
        (term (addListenerHelper 
               (addListenerHelper LS string_type target bool_useCapture S_listener)
               string_type
               ,outerPhase
               bool_useCapture
               S_listener))))])

; removeEventListener
; 4.3 - EventTargetInterface
; Removes an event listener. Calling removeEventListener with arguments which
; do not identify any currently registered EventListener on the EventTarget has
; no effect.
(define-metafunction DOM
  [(removeListenerHelper ((TP_a (L_a ...)) ...
                          ((string_type P) (L_p ... (listener bool_useCapture S_listener) L_q ...))
                          (TP_b (L_b ...)) ...) 
                         string_type P
                         bool_useCapture
                         S_listener)
   ((TP_a (L_a ...)) ...
    ((string_type P) (L_p ... L_q ...))
    (TP_b (L_b ...)) ...)] ;when (string_type P) is present
  [(removeListenerHelper ((TP_a (L_a ...)) ...)
                         string_type P
                         bool_useCapture
                         S_listener)
   ((TP_a (L_a ...)) ...)]) ;when (string_type P) is already absent

(define-metafunction DOM
  [(removeListener LS string_type bool_useCapture S_listener)
   (removeListenerHelper 
    (removeListenerHelper LS string_type target bool_useCapture S_listener)
    string_type
    ,(if (term bool) (term capture) (term bubble))
    bool_useCapture
    S_listener)])

; TODO(matt) - comment/annotate setHandler(Helper)
(define-metafunction DOM
  [(setHandlerHelper ((TP_a (L_a ...)) ...
                      ((string_type P) ((handler S_ignore) L_p ...))
                      (TP_b (L_b ...)) ...)
                     string_type P
                     S_handler)
   ((TP_a (L_a ...)) ...
    ((string_type P) ((handler S_handler) L_p ...))
    (TP_b (L_b ...)) ...)] ;if a handler was present for this (type, phase) pair, overwrite it
  [(setHandlerHelper ((TP_a (L_a ...)) ...
                      ((string_type P) (L_p ...))
                      (TP_b (L_b ...)) ...)
                     string_type P
                     S_handler)
   ((TP_a (L_a ...)) ...
    ((string_type P) ((handler S_handler) L_p ...))
    (TP_b (L_b ...)) ...)] ;if a handler was missing for this (type, phase) pair, add it
  [(setHandlerHelper ((TP_a (L_a ...)) ...)
                     string_type P
                     S_handler)
   ((TP_a (L_a ...)) ...
    ((string_type P) ((handler S_handler))))]
  ) ; if nothing exists for this (type, phase) pair, add it

(define-metafunction DOM
  [(setHandler LS string_type S_handler)
   (setHandlerHelper
    (setHandlerHelper LS string_type target S_handler)
    string_type bubble S_handler)])


(define DOM-reduce
  (reduction-relation
   DOM

   ; Building path in pre-dispatch
   ; 3.1 - Event dispatch and DOM event flow
   ; The propagation path must be an ordered list of event targets through 
   ; which the event object must pass. For tree-based DOM implementations, the
   ; propagation path must be reflect the hierarchical tree structure of the 
   ; document. The last item in the list must be the proximal event target; 
   ; the preceding items in the list are referred to as the target's ancestors,
   ; and the immediately preceding item as the target's parent.
   (--> (state (in-hole Ctx (pre-dispatch loc_current (loc ...) E))
               ((loc_b N_b) ...
                (loc_current
                 (node string LS (loc_children ...) parent))
                (loc_a N_a) ...)
               Log)
        (state (in-hole Ctx (pre-dispatch parent (loc_current loc ...) E))
               ((loc_b N_b) ...
                (loc_current
                 (node string LS (loc_children ...) parent))
                (loc_a N_a) ...)
               Log)
        pd-build-path)

   ; Path building complete, transition to dispatch
   (--> (state (in-hole Ctx
                        (pre-dispatch null (loc_first loc ...) E))
                N-store
                Log)
        (state (in-hole Ctx
                        (dispatch-collect E
                                          loc_first
                                          capture
                                          #f #f #f
                                          (loc_first loc ...)))
               N-store
               Log)
        pd-to-dispatch)

   ; Single-node path degenerate case
   (--> (state (in-hole Ctx (pre-dispatch null (loc) E)) N-store Log)
        (state (in-hole Ctx (dispatch-stupid loc E)) N-store Log)
        dont-do-this)

   ; done with current listener, determine next listener to run (if any)
   ; 3.1 - Event dispatch & DOM event flow
   ; ... the implementation must process all candidate event listeners in order
   ; and trigger each listener if all the following conditions are met:
   ;   - The event object's immediate propagation has not been stopped.
   ;   - The listener has been registered for this event phase.
   ;   - The listener has been registered for this event type.
   (--> (state (in-hole Ctx
                        (dispatch E parent P PDef SP SI
                                  (loc_child ...) (L ...) (listener bool_useCapture skip)))
               N-store
               Log)
        (state (in-hole Ctx
                        (dispatch-next E parent P PDef SP SI
                                       (loc_child ...) (L ...)))
               N-store
               Log)
        finished-listener)
   
   ; done with current handler, determine what steps to take
   ; HTML5 Specification, Section 6.1.6.1 - Event handlers
   ; http://www.w3.org/TR/html5/webappapis.html#event-handler-attributes
   (--> (state (in-hole Ctx
                        (dispatch (event T_event Bubbles Cancels Trusted)
                                  parent P PDef SP SI
                                  (loc_child ...) (L ...)
                                  (handler (in-hole DispCtx (return bool)))))
               N-store
               Log)
        (state (in-hole Ctx
                        (dispatch (event T_event Bubbles Cancels Trusted)
                                  parent P PDef SP SI
                                  (loc_child ...) (L ...)
                                  (listener #f
                                   ,(if (equal? (term bool) 
                                                (equal? (term T_event) "mouseover"))
                                        (term prevent-default)
                                        (term skip)))))
               N-store
               Log)
        return-from-handler) ; when we finish a handler, this rule transmutes it into the exit from a listener
   (--> (state (in-hole Ctx
                        (dispatch E parent P PDef SP SI
                                  (loc_child ...) (L ...) (handler skip)))
               N-store
               Log)
        (state (in-hole Ctx
                        (dispatch E parent P PDef SP SI
                                  (loc_child ...) (L ...) (handler (return #f))))
               N-store
               Log)
        finished-handler)

   ; stop-immediate-prop called, abort dispatch and jump to default action
   ; 3.1 - Event dispatch and DOM event flow
   ; ... the implementation must process all candidate event listeners in order
   ; and trigger each listener if all the following conditions are met:
   ;   ...
   ;   - The event object's immediate propagation has not been stopped.
   ;   ...
   (--> (state (in-hole Ctx
                        (dispatch-next E parent P PDef SP #t
                                       (loc_child ...) (L ...)))
               N-store
               Log)
        (state (in-hole Ctx
                        (dispatch-default E PDef (loc_child ...)))
               N-store
               Log)
        stop-immediate-called)
   
   ; stop-propagation called, finish current node, and then abort dispatch and
   ; jump to default action
   ; 3.1 - Event dispatch and DOM event flow
   ; ... Implementations must let event objects accomplish an event phase by 
   ; applying the following steps while there are pending event targets in the
   ; partial propagation path for this phase and the event object's propagation
   ; has not been stopped through Event.stopPropagation() ...
   (--> (state (in-hole Ctx
                        (dispatch-next E parent P PDef #t #f
                                       (loc_child ...)
                                       (L L_rest ...)))
               N-store
               Log)
        (state (in-hole Ctx
                        (dispatch E parent P PDef #t #f
                                  (loc_child ...) (L_rest ...)
                                  L))
               N-store
               Log)
        stop-prop-called-more-to-do)
   (--> (state (in-hole Ctx
                        (dispatch-next E parent P PDef #t #f (loc_child ...)
                               ()))
               N-store
               Log)
        (state (in-hole Ctx (dispatch-default E PDef (loc_child ...)))
               N-store
               Log)
        stop-prop-called-done-with-node)
   ; neither stop-prop nor stop-imm-prop called, do next listener on current node
   (--> (state (in-hole Ctx
                        (dispatch-next E parent P PDef #f #f (loc_child ...)
                               (L L_rest ...)))
               N-store
               Log)
        (state (in-hole Ctx
                        (dispatch E parent P PDef #f #f
                                  (loc_child ...) (L_rest ...)
                                  L))
               N-store
               Log)
        more-to-do)
   
   ; neither stop-prop nor stop-imm-prop called, no listeners left on current node,
   ; rules for capture, target, bubble
   ; capture->capture
   ; 3.1 - Event dispatch & DOM event flow
   ; The capture phase: the event object must propagate through the 
   ; target's ancestors from the defaultView to the target's parent. This phase
   ; is also known as the capturing phase. Event listeners registered for this 
   ; phase must handle the event before it reaches its target.
   (--> (state (in-hole Ctx
                        (dispatch-next E loc_parent capture PDef #f #f
                                       (loc_a ... loc_parent loc_child
                                              loc_grand loc_b ...)
                                       ()))
               N-store
               Log)
        (state (in-hole Ctx
                        (dispatch-collect E loc_child capture PDef #f #f
                                          (loc_a ... loc_parent loc_child
                                                 loc_grand loc_b ...)))
               N-store
               Log)
        capture-to-capture-collect)
   
   ; capture->target
   ; 3.1 - Event dispatch & DOM event flow
   ; The target phase: the event object must arrive at the event object's 
   ; proximal event target. This phase is also known as the at-target phase. 
   ; Event listeners registered for this phase must handle the event once it 
   ; has reached its target.
   (--> (state (in-hole Ctx
                        (dispatch-next E loc_parent capture PDef #f #f
                               (loc_a ... loc_parent loc_child)
                               ()))
               N-store
               Log)
        (state (in-hole Ctx
                        (dispatch-collect E loc_child target PDef #f #f
                                          (loc_a ... loc_parent loc_child)))
               N-store
               Log)
        capture-to-target-collect)
   ; target->bubble & event bubbles
   (--> (state (in-hole Ctx
                        (dispatch-next (event T_event #t Cancels Trusted)
                                       loc_child target PDef #f #f
                                       (loc_a ... loc_parent loc_child)
                                       ()))
               N-store
               Log)
        (state (in-hole Ctx
                        (dispatch-collect (event T_event #t Cancels Trusted)
                                          loc_parent bubble PDef #f #f
                                          (loc_a ... loc_parent loc_child)))
               N-store
               Log)
        target-to-bubble-collect)
   ; target->default & event doesn't bubble
   ; 3.1 - Event dispatch & DOM event flow
   ; ... If the event type indicates that the event must not bubble, the event 
   ; object must halt after completion of this phase....
   (--> (state (in-hole Ctx
                        (dispatch-next (event T_event #f Cancels Trusted)
                                       loc_child target PDef #f #f
                                       (loc_a ... loc_child)
                                       ()))
               N-store
               Log)
        (state (in-hole Ctx
                        (dispatch-default (event T_event #f Cancels Trusted)
                                          PDef
                                          (loc_a ... loc_child)))
               N-store
               Log)
        target-to-default)
   
   ; bubble->bubble
   ; 3.1 - Event dispatch & DOM event flow
   ; The bubble phase: the event object propagates through the target's 
   ; ancestors in reverse order, starting with the target's parent and ending 
   ; with the defaultView. This phase is also known as the bubbling phase. 
   ; Event listeners registered for this phase must handle the event after it 
   ; has reached its target.
   (--> (state (in-hole Ctx
                        (dispatch-next E loc_child bubble PDef #f #f
                                       (loc_a ... loc_parent loc_child loc_b ...)
                                       ()))
               N-store
               Log)
        (state (in-hole Ctx
                        (dispatch-collect E loc_parent bubble PDef #f #f
                                          (loc_a ... loc_parent loc_child
                                                 loc_b ...)))
               N-store
               Log)
        bubble-to-bubble-collect)
   ; bubble->default
   (--> (state (in-hole Ctx
                        (dispatch-next E loc_root bubble PDef #f #f
                                       (loc_root loc_b ...)
                                       ()))
               N-store
               Log)
        (state (in-hole Ctx (dispatch-default E PDef (loc_root loc_b ...)))
               N-store
               Log)
        bubble-to-default)

   ; collecting listeners on current node, and listeners are found
   (--> (state (in-hole Ctx
                        (dispatch-collect (event T_event Bubbles Cancels Trusted)
                                          loc_target P PDef #f #f
                                          (loc_a ... loc_target loc_b ...)))
               ((loc_c N_c) ...
                (loc_target
                 (node string
                       ((TP_a (L_a ...)) ...
                        ((T_event P) (L_wanted ...))
                        (TP_b (L_b ...)) ...)
                       (loc_kids ...)
                       parent))
                (loc_d N_d) ...)
               Log)
        (state (in-hole Ctx
                        (dispatch-next (event T_event Bubbles Cancels Trusted)
                                       loc_target P PDef #f #f
                                       (loc_a ... loc_target loc_b ...)
                                       (L_wanted ...)))
               ((loc_c N_c) ...
                (loc_target
                 (node string
                       ((TP_a (L_a ...)) ...
                        ((T_event P) (L_wanted ...))
                        (TP_b (L_b ...)) ...)
                       (loc_kids ...)
                       parent))
                (loc_d N_d) ...)
               Log)
        collect-found-listeners)
   ; collecting listeners on current node, and listeners are not found
   (--> (side-condition
         (state (in-hole Ctx
                         (dispatch-collect (event T_event Bubbles Cancels Trusted)
                                           loc_target P PDef #f #f
                                           (loc_a ... loc_target loc_b ...)))
               ((loc_c N_c) ...
                (loc_target
                 (node string
                       ((TP_a (L_a ...)) ...)
                       (loc_kids ...)
                       parent))
                (loc_d N_d) ...)
               Log)
         (not-in? (term T_event) (term P) (term (TP_a ...))))
        (state (in-hole Ctx
                        (dispatch-next (event T_event Bubbles Cancels Trusted)
                                       loc_target P PDef #f #f
                                       (loc_a ... loc_target loc_b ...)
                                       ()))
               ((loc_c N_c) ...
                (loc_target
                 (node string
                       ((TP_a (L_a ...)) ...)
                       (loc_kids ...)
                       parent))
                (loc_d N_d) ...)
               Log)
        collect-found-no-listeners)

   ; seq-skip
   (--> (state (in-hole Ctx (seq skip S))
               N-store
               Log)
        (state (in-hole Ctx S)
               N-store
               Log)
        seq-skip)

   ; addEventListener
   ; 4.3 - EventTarget interface
   ; Registers an event listener, depending on the useCapture parameter, on the
   ; capture phase of the DOM event flow or its target and bubbling phases.
   (--> (state (in-hole Ctx
                        (addEventListener
                         loc_target string_type bool S_listener))
               ((loc_a N_a) ...
                (loc_target
                 (node
                  string_name
                  LS
                  (loc_kids ...)
                  parent_node))
                (loc_b N_b) ...)
               Log)
        (state (in-hole Ctx skip)
               ((loc_a N_a) ...
                (loc_target
                 (node string_name
                       (addListener LS string_type bool S_listener)
                       (loc_kids ...)
                       parent_node))
                (loc_b N_b) ...)
               Log)
        do-addEventListener)
   
   ; removeEventListener
   ; 4.3 - EventTarget interface
   ; Removes an event listener. Calling removeEventListener with arguments 
   ; which do not identify any currently registered EventListener on the 
   ; EventTarget has no effect.
   (--> (state (in-hole Ctx
                        (removeEventListener
                         loc_target string_type bool S_listener))
               ((loc_a N_a) ...
                (loc_target
                 (node
                  string_name
                  LS
                  (loc_kids ...)
                  parent_node))
                (loc_b N_b) ...)
               Log)
        (state (in-hole Ctx skip)
               ((loc_a N_a) ...
                (loc_target
                 (node string_name
                       (removeListener LS string_type bool S_listener)
                       (loc_kids ...)
                       parent_node))
                (loc_b N_b) ...)
               Log)
        do-removeEventListener)
   
   ; setEventHandler
   (--> (state (in-hole Ctx
                        (setEventHandler
                         loc_target string_type S_listener))
               ((loc_a N_a) ...
                (loc_target
                 (node
                  string_name
                  LS
                  (loc_kids ...)
                  parent_node))
                (loc_b N_b) ...)
               Log)
        (state (in-hole Ctx skip)
               ((loc_a N_a) ...
                (loc_target
                 (node string_name
                       (setHandler LS string_type S_listener)
                       (loc_kids ...)
                       parent_node))
                (loc_b N_b) ...)
               Log)
        do-setEventHandler)

   ; debug-print
   (--> (state (in-hole Ctx (debug-print string_new))
               N-store
               (string_log ...))
        (state (in-hole Ctx skip)
               N-store
               (string_log ... string_new))
        debug-print)

   ; if-phase
   (--> (state (in-hole Ctx
                        (dispatch E parent P PDef SP SI (loc ...) (L ...)
                                  (in-hole LCtx
                                           (in-hole DispCtx
                                                    (if-phase P_check S_true S_false)))))
               N-store
               Log)
        (state (in-hole Ctx
                        (dispatch E parent P PDef SP SI (loc ...) (L ...)
                                  (in-hole LCtx
                                           (in-hole DispCtx
                                                    ,(if (equal? (term P) (term P_check))
                                                         (term S_true)
                                                         (term S_false))))))
               N-store
               Log)
        do-if-phase)

   ; if-curTarget
   (--> (state (in-hole Ctx
                        (dispatch E parent P PDef SP SI (loc ...) (L ...)
                                  (in-hole LCtx
                                           (in-hole DispCtx
                                                    (if-curTarget loc_check S_true S_false)))))
               N-store
               Log)
        (state (in-hole Ctx
                        (dispatch E parent P PDef SP SI (loc ...) (L ...)
                                  (in-hole LCtx
                                           (in-hole DispCtx
                                                    ,(if (equal? (term parent) (term loc_check))
                                                         (term S_true)
                                                         (term S_false))))))
               N-store
               Log)
        do-if-curTarget)

   ; stopPropagation
   ; 4.1 - Event interface
   ; Prevents other event listeners from being triggered but its effect must be
   ; deferred until all event listeners attached on the Event.currentTarget 
   ; have been triggered. Once it has been called, further calls to this method
   ; have no additional effect.
   (--> (state (in-hole Ctx
                        (dispatch E parent P PDef SP SI (loc ...) (L ...)
                                  (in-hole LCtx (in-hole DispCtx stop-prop))))
               N-store
               Log)
        (state (in-hole Ctx
                        (dispatch E parent P PDef #t SI (loc ...) (L ...)
                                  (in-hole LCtx (in-hole DispCtx skip))))
               N-store
               Log)
        do-stop-prop)

   ; stopImmediatePropagation
   ; 4.1 - Event interface
   ; Prevents other event listeners from being triggered and, unlike 
   ; Event.stopPropagation() its effect must be immediate . Once it has been 
   ; called, further calls to this method have no additional effect.
   (--> (state (in-hole Ctx
                        (dispatch E parent P PDef SP SI (loc ...) (L ...)
                                  (in-hole LCtx (in-hole DispCtx stop-immediate))))
               N-store
               Log)
        (state (in-hole Ctx
                        (dispatch E parent P PDef #t #t (loc ...) (L ...)
                                  (in-hole LCtx (in-hole DispCtx skip))))
               N-store
               Log)
        do-stop-immediate)
   
   ; preventDefault
   ; 4.1 - Event interface
   ; When this method is invoked, the event must be canceled, meaning any 
   ; default actions normally taken by the implementation as a result of the 
   ; event must not occur (see also Default actions and cancelable events). 
   ; Default actions which occur prior to the event's dispatch (see Default 
   ; actions and cancelable events) are reverted. Calling this method for a 
   ; non-cancelable event must have no effect. If an event has more than one 
   ; default action, each cancelable default action must be canceled.
   (--> (state (in-hole Ctx
                        (dispatch (name E (event T Bubbles #t Trusted)) 
                                  parent 
                                  P 
                                  PDef SP SI 
                                  (loc ...) 
                                  (L ...)
                                  (in-hole LCtx (in-hole DispCtx prevent-default))))
               N-store
               Log)
        (state (in-hole Ctx
                        (dispatch E parent P #t SP SI (loc ...) (L ...)
                                  (in-hole LCtx (in-hole DispCtx skip))))
               N-store
               Log)
        do-prevent-default-cancelable)
   (--> (state (in-hole Ctx
                        (dispatch (name E (event T Bubbles #f Trusted)) 
                                  parent 
                                  P 
                                  PDef SP SI 
                                  (loc ...) 
                                  (L ...)
                                  (in-hole LCtx (in-hole DispCtx prevent-default))))
               N-store
               Log)
        (state (in-hole Ctx
                        (dispatch E parent P PDef SP SI (loc ...) (L ...)
                                  (in-hole LCtx (in-hole DispCtx skip))))
               N-store
               Log)
        do-prevent-default-not-cancelable)

   ; 3.2 - Default actions and cancelable events
   ; A default action is an optional supplementary behavior that an 
   ; implementation must perform in combination with the dispatch of the event 
   ; object. Each event type definition, and each specification, defines the 
   ; default action for that event type, if it has one. An instance of an event
   ; may have more than one default action under some circumstances, such as 
   ; when associated with an activation trigger. A default action may be 
   ; cancelled through the invocation of the Event.preventDefault() method.
   ; dispatch-default-prevented
   (--> (state (in-hole Ctx
                        (dispatch-default E_inner
                                          #t
                                          (loc_inner ...)))
               N-store
               Log)
        (state (in-hole Ctx (debug-print "default-prevented"))
               N-store
               Log)
        dispatch-default-prevented)
   
   ; dispatch-default-not-prevented
   (--> (state (in-hole Ctx
                        (dispatch-default E_inner
                                          #f
                                          (loc_inner ...)))
               N-store
               Log)
        (state (in-hole Ctx (debug-print "default action!"))
               N-store
               Log)
        dispatch-not-default-prevented)

   
   ))